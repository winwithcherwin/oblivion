apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: create-kubernetes-bootstrap-argo-events-rbac
spec:
  background: true
  rules:
  - name: create-clusterrole
    match:
      any:
      - resources:
          kinds:
          - ConfigMap
          annotations:
            create-cluster/enable: "true"
          selector:
            matchLabels:
              provider: digitalocean
    context:
    - name: config
      configMap:
        name: "{{ request.object.metadata.name }}"
        namespace: "{{ request.namespace }}"
    - name: context
      variable:
        jmesPath: "config.data.context | parse_yaml(@)"   
    generate:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      name: "argo-droplet-bootstrap-{{ context.clusterName }}"
      generateExisting: true
      synchronize: true
      data:
        rules:
          - apiGroups: [""]
            resources: ["configmaps", "pods"]
            verbs: ["list", "watch", "create", "update", "delete"]
          - apiGroups: ["droplet.digitalocean.crossplane.io"]
            resources: ["droplets"]
            verbs: ["list", "watch", "create", "update", "delete"]

  - name: create-clusterrole-binding
    match:
      any:
      - resources:
          kinds:
          - ConfigMap
          annotations:
            create-cluster/enable: "true"
          selector:
            matchLabels:
              provider: digitalocean
    context:
    - name: config
      configMap:
        name: "{{ request.object.metadata.name }}"
        namespace: "{{ request.namespace }}"
    - name: context
      variable:
        jmesPath: "config.data.context | parse_yaml(@)"   
    generate:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      name: "argo-droplet-bootstrap-{{ context.clusterName }}"
      generateExisting: true
      synchronize: true
      data:
        metadata:
          labels:
            cluster: "{{ context.clusterName }}"
            bootstrap: "true"
        subjects:
          - kind: ServiceAccount
            name: default
            namespace: "{{ request.namespace }}"
        roleRef:
          kind: ClusterRole
          name: "argo-droplet-bootstrap-{{ context.clusterName }}"
          apiGroup: rbac.authorization.k8s.io
